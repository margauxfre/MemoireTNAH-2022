<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Antonomaz 
                 
                 
                        <desc>ODD des mazarinades encodées dans le cadre du projet
                        Antonomaz.</desc>
                </title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under
                        GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions
                            GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify it under
                        the terms of the GNU General Public License as published by the Free
                        Software Foundation, either version 3 of the License, or (at your option)
                        any later version.</p>
                    <p>This program is distributed in the hope that it will be useful, but WITHOUT
                        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
                        FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
                        more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl/>
        </encodingDesc>
        <revisionDesc>
            <change when="2022-03-30+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="Antonomaz" source="teipublisher.odd">
                <elementSpec ident="publicationStmt" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="fileDesc" mode="change">
                    <modelSequence predicate="$parameters?header='short'">
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="titleStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="editionStmt"/>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="publicationStmt"/>
            </model>
        </modelSequence>
                    <model behaviour="title">
            <param name="content" value="titleStmt"/>
        </model>
                </elementSpec>
                <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='metadata'" behaviour="heading">
            <param name="level" value="3"/>
            <outputRendition xml:space="preserve">
            text-align:center
            </outputRendition>
            <outputRendition xml:space="preserve">
            margin-bottom:auto
            </outputRendition>
            <outputRendition xml:space="preserve">
            margin-top: 7px
            </outputRendition>
        </model>
                    <model predicate="@type=&#34;sub&#34;" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
            <outputRendition xml:space="preserve">
            text-align:center
            </outputRendition>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="titleStmt" mode="change">
                    <model predicate="$parameters?header='metadata'" behaviour="block">
            <param name="content" value="subsequence(title, 2)"/>
        </model>
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
                <param name="target" value="&#34;_blank&#34;"/>
                <param name="id" value="substring-before(ancestor::TEI/@xml:id, '_')"/>
                <pb:template xmlns="" xml:space="preserve"><p>[[content]]<small>[[id]]</small></p></pb:template>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="not(@target)" behaviour="inline"/>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="TEI" mode="change"/>
                <elementSpec ident="teiHeader" mode="change">
                    <modelSequence output="web" predicate="$parameters?mode='manifest'">
            <model predicate="parent::TEI[ends-with(@xml:id, &#34;_GBOOKS&#34;)]" behaviour="inline">
                <param name="manifest" value="concat(&#34;https://antonomaz.huma-num.fr/manifests/&#34;, substring-before(parent::TEI/@xml:id, &#34;_&#34;),&#34;.json&#34;)"/>
                <pb:template xmlns="" xml:space="preserve"><span id="manifeste" href="[[manifest]]"/></pb:template>
            </model>
            <model predicate="parent::TEI[ends-with(@xml:id, &#34;_MAZ&#34;)]" behaviour="inline">
                <param name="manifest" value="replace(./fileDesc/sourceDesc/bibl/ref/@target, '(.*)ark:(.*)mz(.*)', '$1iiif/$3/manifest')"/>
                <pb:template xmlns="" xml:space="preserve"><span id="manifeste" href="[[manifest]]"/></pb:template>
            </model>
            <model output="web" predicate="parent::TEI[ends-with(@xml:id, &#34;_GALL&#34;)]" behaviour="inline">
                <param name="manifest" value="replace(./fileDesc/sourceDesc/bibl/ref/@target, '(.*)ark(.*)', '$1iiif/ark$2/manifest.json')"/>
                <pb:template xmlns="" xml:space="preserve"><span id="manifeste" href="[[manifest]]"/></pb:template>
            </model>
        </modelSequence>
                    <modelSequence output="web" predicate="$parameters?mode='metadata'">
            <model output="web" behaviour="inline">
                <param name="titre" value="//sourceDesc/bibl/title"/>
                <param name="bibl" value="//sourceDesc/bibl"/>
                <param name="msIdentifier" value="//sourceDesc/msDesc/msIdentifier"/>
                <param name="abstract" value="//abstract"/>
                <param name="textClass" value="//textClass"/>
                <pb:template xmlns="" xml:space="preserve"><h3 style="margin-bottom: 50px;">Métadonnées</h3>

<div style="width:100%; overflow:auto; font-size:19px;">
  <div style="text-align:left; position:relative; float:left; width:72%;">
<table>
 [[bibl]]
 [[msIdentifier]]
</table>
    </div>

 <div style="font-size:smaller; text-align:left; position:relative; float: right; width: 28%; ">[[textClass]]
  </div>
</div>

<div>[[abstract]]</div>

</pb:template>
                <outputRendition xml:space="preserve">
                
                </outputRendition>
            </model>
        </modelSequence>
                    <modelSequence predicate="$parameters?mode='facsimile'"/>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>

                <elementSpec ident="date" mode="change">
                    <modelGrp output="web" predicate="parent::bibl">
            <modelSequence output="web" predicate="@source=&#34;Moreau&#34; or @source=&#34;Mazarine&#34;">
                <model predicate="@source='Moreau'" behaviour="inline">
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Date</th>
  <td>[[content]]</td>
</tr></pb:template>
                </model>
                <model predicate="@source='Mazarine'" behaviour="inline">
                    <param name="source" value="@source"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Date <small>(<a href="../documentation/bibliography.html#2">[[source]]</a>)</small></th>
  <td>[[content]]  </td>
</tr></pb:template>
                </model>
            </modelSequence>
            <modelSequence predicate="not(@source=&#34;Moreau&#34;) and not(@source=&#34;Mazarine&#34;)">
                <model predicate="@when and not(@notBefore) and not(@notAfter)" behaviour="inline">
                    <param name="source" value="@source"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Date <small>(<a href="../documentation/bibliography.html#2">[[source]]</a>)</small></th>
  <td>[[content]]  </td>
</tr></pb:template>
                </model>
                <model predicate="not(@when) and (.[contains(.,substring(string(@notBefore), 1, 4))] or .[contains(.,substring(string(@notAfter), 1, 4))] or (.[contains(.,substring(string(@notAfter), 1, 4))] and .[contains(.,substring(string(@notBefore), 1, 4))]))" behaviour="inline">
                    <param name="source" value="@source"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Date <small>(<a href="../documentation/bibliography.html#2">[[source]]</a>)</small></th>
  <td>[[content]] </td>
</tr></pb:template>
                </model>
                <model predicate="not(@when) and (.[not(contains(.,substring(string(@notBefore), 1, 4)))] or .[not(contains(.,substring(string(@notAfter), 1, 4)))] or (.[not(contains(.,substring(string(@notAfter), 1, 4)))] and .[not(contains(.,substring(string(@notBefore), 1, 4)))]))" behaviour="inline">
                    <param name="source" value="@source"/>
                    <param name="notBefore" value="if (string-length(@notBefore)= 10) then (substring(@notBefore, 9,2), &#34;/&#34;,substring(@notBefore, 6,2), &#34;/&#34;,substring(@notBefore, 1,4)) else  (substring(@notBefore, 6,2), &#34;/&#34;,substring(@notBefore, 1,4))"/>
                    <param name="notAfter" value="if (@notBefore) then   if (string-length(@notAfter)= 10)  then (&#34; - &#34;,substring(@notAfter, 9,2), &#34;/&#34;,substring(@notAfter, 6,2), &#34;/&#34;,substring(@notAfter, 1,4)) else  (&#34; - &#34;, substring(@notAfter, 6,2), &#34;/&#34;,substring(@notAfter, 1,4))  else  if (string-length(@notAfter)= 10)  then (substring(@notAfter, 9,2), &#34;/&#34;,substring(@notAfter, 6,2), &#34;/&#34;,substring(@notAfter, 1,4)) else  (substring(@notAfter, 6,2), &#34;/&#34;,substring(@notAfter, 1,4))"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Date <small>(<a href="../documentation/bibliography.html#2">[[source]]</a>)</small></th>
  <td>[[notBefore]][[notAfter]] : [[content]]  </td>
</tr></pb:template>
                </model>
            </modelSequence>
        </modelGrp>
                    <model output="print" predicate="text()" behaviour="inline"/>
                    <model output="print" predicate="@when and not(text())" behaviour="inline">
            <param name="content" value="@when"/>
        </model>
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@when"/>
        </model>
                    <model predicate="text()" behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="bibl" mode="change">
                    <model predicate="$parameters?mode='metadata'" behaviour="inline">
            <param name="date" value="//date"/>
            <param name="auteur" value="//author"/>
            <param name="imprimeur" value="//publisher"/>
            <param name="lieu_impression" value="//pubPlace"/>
            <param name="note" value="//note"/>
            <param name="page" value="//extent/measure"/>
            <param name="notice_Mazarine" value="//relatedItem"/>
            <param name="titre" value="//title"/>
            <pb:template xmlns="" xml:space="preserve"><tr>[[date]]</tr>
<tr>[[auteur]]</tr>
<tr>[[imprimeur]]</tr>
<tr>[[lieu_impression]]</tr>
<tr>[[note]]</tr>
<tr>[[page]]</tr>
<tr>[[notice_Mazarine]]</tr></pb:template>
        </model>
                    <model predicate="parent::listBibl" behaviour="listItem"/>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="undefined">
                    <modelSequence output="web" predicate="parent::bibl">
            <model predicate="@source='Moreau'" behaviour="inline">
                <param name="source" value="@source"/>
                <pb:template xmlns="" xml:space="preserve"><p> <b>Date</b> : [[content]] ([[source]])</p></pb:template>
            </model>
        </modelSequence>
                    <model output="print" predicate="text()" behaviour="inline"/>
                    <model output="print" predicate="@when and not(text())" behaviour="inline">
            <param name="content" value="@when"/>
        </model>
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@when"/>
        </model>
                    <model predicate="text()" behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="author" mode="change">
                    <modelGrp output="web" predicate="parent::bibl">
            <modelSequence predicate="empty(self) and not(descendant::*)">
                <model behaviour="inline">
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur</th>
  <td>Sans nom</td>
</tr></pb:template>
                </model>
            </modelSequence>
            <modelSequence predicate="not(empty(descendant::*)) and .//forename and .//surname and .//addName">
                <model predicate="not(@source) and not(@role)" behaviour="inline">
                    <param name="surnom" value="//addName"/>
                    <param name="nom" value="concat(//forename, &#34; &#34;, //surname)"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur</th>
  <td>[[surnom]] ([[nom]])</td>
</tr></pb:template>
                </model>
                <model predicate="@role and @source" behaviour="inline">
                    <param name="role" value="if (@role=&#34;speaker&#34;) then fn:replace(.,., &#34;faux locuteur&#34;) else if (@role=&#34;alleged_author&#34;) then fn:replace(.,., &#34;supposé&#34;) else  if (@role=&#34;dubious_author&#34;) then fn:replace(.,., &#34;douteux&#34;) else ()"/>
                    <param name="source" value="@source"/>
                    <param name="nom" value="concat(//forename, &#34; &#34;, //surname)"/>
                    <param name="surnom" value="//addName"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur <small>([[role]] selon [[source]])</small></th>
  <td>[[surnom]] ([[nom]])</td>
</tr></pb:template>
                </model>
                <model predicate="@source and not(@role)" behaviour="inline">
                    <param name="source" value="@source"/>
                    <param name="surnom" value="//addName"/>
                    <param name="nom" value="concat(//forename, &#34; &#34;, //surname)"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur <small>(selon [[source]])</small></th>
  <td>[[surnom]] ([[nom]])</td>
</tr></pb:template>
                </model>
                <model predicate="@role and not(@source)" behaviour="inline">
                    <param name="role" value="if (@role=&#34;speaker&#34;) then fn:replace(.,., &#34;faux locuteur&#34;) else if (@role=&#34;alleged_author&#34;) then fn:replace(.,., &#34;supposé&#34;) else  if (@role=&#34;dubious_author&#34;) then fn:replace(.,., &#34;douteux&#34;) else ()"/>
                    <param name="nom" value="concat(//forename, &#34; &#34;, //surname)"/>
                    <param name="surnom" value="//surnom"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur <small>([[role]])</small></th>
  <td>[[surnom]] ([[nom]])</td>
</tr></pb:template>
                </model>
            </modelSequence>
            <modelSequence output="web" predicate="not(empty(descendant::*)) and not(.//forename and .//surname and .//addName)">
                <model predicate="not(@source) and not(@role)" behaviour="inline">
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur</th>
  <td>[[content]]</td>
</tr></pb:template>
                </model>
                <model predicate="@source and not(@role)" behaviour="inline">
                    <param name="source" value="@source"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur <small>(selon [[source]])</small></th>
  <td>[[content]]</td>
</tr></pb:template>
                </model>
                <model predicate="@role and not(@source)" behaviour="inline">
                    <param name="role" value="if (@role=&#34;speaker&#34;) then fn:replace(.,., &#34;faux locuteur&#34;) else if (@role=&#34;alleged_author&#34;) then fn:replace(.,., &#34;supposé&#34;) else  if (@role=&#34;dubious_author&#34;) then fn:replace(.,., &#34;douteux&#34;) else ()"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur <small>([[role]])</small></th>
  <td>[[content]]</td>
</tr></pb:template>
                </model>
                <model predicate="@role and @source" behaviour="inline">
                    <param name="role" value="if (@role=&#34;speaker&#34;) then fn:replace(.,., &#34;faux locuteur&#34;) else if (@role=&#34;alleged_author&#34;) then fn:replace(.,., &#34;supposé&#34;) else  if (@role=&#34;dubious_author&#34;) then fn:replace(.,., &#34;douteux&#34;) else ()"/>
                    <param name="source" value="@source"/>
                    <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Auteur <small>([[role]] selon [[source]])</small></th>
  <td>[[content]]</td>
</tr></pb:template>
                </model>
            </modelSequence>
        </modelGrp>
                    <model predicate="ancestor::teiHeader" behaviour="block">
            <outputRendition xml:space="preserve" scope="before">
            content: 'By ';
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="publisher" mode="change">
                    <model output="web" predicate="parent::bibl" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Imprimeur</th>
  <td>[[content]]</td>
</tr></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="pubPlace" mode="change">
                    <model output="web" predicate="parent::bibl" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Lieu de publication</th>
  <td>[[content]]</td>
</tr></pb:template>
        </model>
                    <model predicate="ancestor::teiHeader" behaviour="omit">
            <desc>Omit if located in teiHeader. </desc>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="parent::bibl" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Format</th>
  <td>[[content]]</td>
</tr></pb:template>
        </model>
                    <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                <elementSpec ident="measure" mode="change">
                    <model output="web" predicate="parent::extent" behaviour="inline">
            <param name="quantite" value="@quantity"/>
            <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Nombre de pages</th>
  <td>[[quantite]]</td>
</tr></pb:template>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="relatedItem" mode="change">
                    <model output="web" predicate="parent::bibl and @target!='none'" behaviour="inline">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Notice Mazarine</th>
  <td><a href="[[target]]">[[target]]</a></td>
</tr></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="msDesc" mode="add"/>
                <elementSpec ident="msIdentifier" mode="add">
                    <model predicate="$parameters?mode='metadata'" behaviour="inline">
            <param name="lieu" value="concat(//institution, &#34; (&#34;, //settlement, &#34;)&#34;)"/>
            <param name="fonds" value="//repository"/>
            <param name="cote" value="//idno"/>
            <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Lieu de conservation</th>
  <td>[[lieu]]</td>
</tr>
<tr>[[fonds]]</tr>
<tr>[[cote]]</tr></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="settlement" mode="add"/>
                <elementSpec ident="repository" mode="add">
                    <modelSequence predicate="parent::msIdentifier">
            <model predicate="text()" behaviour="inline">
                <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Fonds</th>
  <td>[[content]]</td>
</tr></pb:template>
            </model>
            <model predicate="not(text())" behaviour="inline"/>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="idno" mode="add">
                    <modelSequence predicate="parent::msIdentifier">
            <model predicate="not(text())" behaviour="inline"/>
            <model predicate="text()" behaviour="inline">
                <pb:template xmlns="" xml:space="preserve"><tr>
  <th>Cote</th>
  <td>[[content]]</td>
</tr></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="abstract" mode="add">
                    <model predicate="$parameters?mode='metadata'" behaviour="inline">
            <param name="p" value="//p[@source!=&#34;Moreau&#34;]"/>
            <pb:template xmlns="" xml:space="preserve"><p>[[p]]</p></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                    <model predicate="parent::abstract and text() and @source!=&#34;Moreau&#34;" behaviour="paragraph" useSourceRendition="true">
            <param name="source" value="if (@source='Mazarine') then concat(&#34;de la Bibliothèque &#34;, @source) else if (@source='BM_Lyon') then fn:replace(., ., &#34;de la bibliothèque municipale de Lyon&#34;) else  if (@source='BnF') then fn:replace(.,., &#34;de la Bibliothèque nationale de France&#34;) else  if (@source='Socard') then concat(&#34;de Emile&#34;, @source) else  if (@source='Labadie') then concat(&#34;de Ernest &#34;) else if (@source='Artois') then concat(&#34;de Armand &#34;) else @source"/>
            <pb:template xmlns="" xml:space="preserve">Commentaire [[source]] : [[content]]</pb:template>
            <outputRendition xml:space="preserve">
            text-align: justify;
            </outputRendition>
        </model>
                </elementSpec>
                
                <elementSpec ident="keywords" mode="add"/>
                 <elementSpec ident="term" mode="add">
                    <modelSequence predicate="ancestor::textClass">
            <model predicate="@type=&#34;subject&#34; and text()" behaviour="inline">
                <pb:template xmlns="" xml:space="preserve"><li>[[content]]</li></pb:template>
            </model>
            <model predicate="(@type='genre' or @type='subgenre') and text()" behaviour="inline">
                <param name="type" value="@type"/>
                <pb:template xmlns="" xml:space="preserve"><tr>
  <th>[[type]]</th>
  <td>[[content]]</td>
</tr></pb:template>
            </model>
        </modelSequence>
                </elementSpec>

            <elementSpec ident="textClass" mode="add">
                    <modelSequence predicate="$parameters?mode='metadata'">
            <model predicate="descendant::term[@type=&#34;genre&#34;]/text() or descendant::term[@type=&#34;subgenre&#34;]/text()" behaviour="inline">
                <param name="term" value="//term[@type=&#34;genre&#34; or @type=&#34;subgenre&#34;]"/>
                <pb:template xmlns="" xml:space="preserve"><table style="margin: auto;"><tr>[[term]]</tr></table></pb:template>
            </model>
            <model predicate="descendant::term[@type=&#34;subject&#34;]/text()" behaviour="inline">
                <param name="term" value="//term[@type=&#34;subject&#34;]"/>
                <pb:template xmlns="" xml:space="preserve"><h5 style="text-align:center;">Mot(s)-clé(s)</h5>
<ul>[[term]]</ul></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>